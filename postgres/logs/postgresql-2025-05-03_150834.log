2025-05-03 15:08:34.152 UTC [1] LOG:  starting PostgreSQL 16.8 (Debian 16.8-1.pgdg120+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit
2025-05-03 15:08:34.163 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2025-05-03 15:08:34.164 UTC [1] LOG:  listening on IPv6 address "::", port 5432
2025-05-03 15:08:34.177 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-05-03 15:08:34.201 UTC [30] LOG:  database system was shut down at 2025-05-03 14:50:55 UTC
2025-05-03 15:08:34.226 UTC [1] LOG:  database system is ready to accept connections
2025-05-03 15:08:35.830 UTC [35] LOG:  statement: 
	      SELECT EXISTS (
	        SELECT 1 FROM pg_type WHERE typname = 'transaction_type'
	      ) AS type_exists;
	    
2025-05-03 15:08:35.865 UTC [35] LOG:  statement: 
	        SELECT e.enumlabel
	        FROM pg_enum e
	        JOIN pg_type t ON e.enumtypid = t.oid
	        WHERE t.typname = 'transaction_type'
	        ORDER BY e.enumsortorder;
	      
2025-05-03 15:08:35.876 UTC [35] LOG:  statement: 
	      CREATE TABLE IF NOT EXISTS Transactions (
	        id SERIAL PRIMARY KEY,
	        date TEXT NOT NULL,
	        time TEXT NOT NULL,
	        type transaction_type NOT NULL,
	        amount TEXT NOT NULL,
	        name TEXT NOT NULL,
	        ref TEXT NOT NULL,
	        fee TEXT NOT NULL,
	        remarks TEXT NOT NULL,
	        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	      );
	    
2025-05-03 15:08:35.879 UTC [35] LOG:  statement: 
	      DO $$ 
	      BEGIN
	        IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
	                       WHERE table_name = 'transactions' AND column_name = 'created_at') THEN
	          ALTER TABLE Transactions ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	        END IF;
	        IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
	                       WHERE table_name = 'transactions' AND column_name = 'updated_at') THEN
	          ALTER TABLE Transactions ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	        END IF;
	      END $$;
	    
2025-05-03 15:08:35.917 UTC [35] LOG:  statement: 
	      CREATE TABLE IF NOT EXISTS CurrentBalance (
	        id SERIAL PRIMARY KEY,
	        balance DECIMAL NOT NULL DEFAULT 0.00
	      );
	    
2025-05-03 15:08:35.918 UTC [35] LOG:  statement: SELECT * FROM CurrentBalance
2025-05-03 15:08:43.940 UTC [35] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:08:43.960 UTC [35] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:08:43.964 UTC [45] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:08:43.966 UTC [44] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:08:43.966 UTC [44] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:08:43.970 UTC [46] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:08:43.970 UTC [46] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:08:43.999 UTC [46] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:10:21.034 UTC [80] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:10:21.034 UTC [80] DETAIL:  parameters: $1 = '2025-05-03', $2 = '14:48', $3 = 'Cash Out', $4 = '55', $5 = 'CARISSE V.', $6 = '91980', $7 = '5', $8 = 'CLAIMED'
2025-05-03 15:10:21.046 UTC [80] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:10:21.046 UTC [80] DETAIL:  parameters: $1 = '55'
2025-05-03 15:09:26.985 UTC [80] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:09:26.985 UTC [80] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:09:26.998 UTC [80] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:09:26.998 UTC [80] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:09:27.012 UTC [80] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:09:27.012 UTC [80] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:09:27.013 UTC [82] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:09:27.014 UTC [81] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:09:27.014 UTC [83] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:09:27.022 UTC [84] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:10:23.682 UTC [135] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:10:23.682 UTC [135] DETAIL:  parameters: $1 = '2025-05-03', $2 = '16:29', $3 = 'Cash Out', $4 = '1000', $5 = 'SEABANK', $6 = '87121', $7 = '20', $8 = 'CLAIMED'
2025-05-03 15:10:23.690 UTC [135] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:10:23.690 UTC [135] DETAIL:  parameters: $1 = '1000'
2025-05-03 15:10:24.016 UTC [135] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:10:24.016 UTC [135] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:10:24.020 UTC [136] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:10:24.021 UTC [135] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:10:24.022 UTC [137] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:10:24.022 UTC [137] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:10:24.024 UTC [136] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:10:24.024 UTC [136] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:10:24.029 UTC [136] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:10:24.050 UTC [138] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:10:38.804 UTC [148] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:10:38.804 UTC [148] DETAIL:  parameters: $1 = '2025-05-03', $2 = '19:07', $3 = 'Cash In', $4 = '100', $5 = 'MA N M.', $6 = '74835', $7 = '10', $8 = 'CUANA'
2025-05-03 15:10:38.806 UTC [148] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:10:38.806 UTC [148] DETAIL:  parameters: $1 = '-100'
2025-05-03 15:10:39.120 UTC [148] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:10:39.120 UTC [148] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:10:39.123 UTC [148] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:10:39.125 UTC [148] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:10:39.128 UTC [148] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:10:39.128 UTC [148] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:10:39.133 UTC [148] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:10:39.137 UTC [150] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:10:39.138 UTC [149] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:10:39.138 UTC [149] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:13:34.258 UTC [28] LOG:  checkpoint starting: time
2025-05-03 15:13:34.709 UTC [28] LOG:  checkpoint complete: wrote 7 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.426 s, sync=0.006 s, total=0.452 s; sync files=6, longest=0.004 s, average=0.001 s; distance=7 kB, estimate=7 kB; lsn=0/19BC7C0, redo lsn=0/19BC788
2025-05-03 15:47:45.843 UTC [2012] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:47:45.842 UTC [2010] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:47:45.842 UTC [2009] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:47:45.867 UTC [2008] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:47:45.867 UTC [2008] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:47:45.868 UTC [2011] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:47:45.868 UTC [2011] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:47:45.894 UTC [2011] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:48:11.569 UTC [2031] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:48:11.569 UTC [2031] DETAIL:  parameters: $1 = '2025-05-03', $2 = '19:30', $3 = 'Cash In', $4 = '110', $5 = 'MA K JE E F.', $6 = '21505', $7 = '10', $8 = 'SENT'
2025-05-03 15:48:11.577 UTC [2031] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:48:11.577 UTC [2031] DETAIL:  parameters: $1 = '-110'
2025-05-03 15:48:11.780 UTC [2031] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:48:11.780 UTC [2031] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:48:11.782 UTC [2031] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:48:11.784 UTC [2031] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:48:11.784 UTC [2031] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:48:11.785 UTC [2031] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:48:11.787 UTC [2031] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:48:11.792 UTC [2031] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:48:11.792 UTC [2031] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:48:11.799 UTC [2032] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:48:27.000 UTC [2049] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:48:27.000 UTC [2049] DETAIL:  parameters: $1 = '2025-05-03', $2 = '19:43', $3 = 'Cash In', $4 = '35', $5 = 'CARISSE V.', $6 = '408218', $7 = '5', $8 = 'SENT'
2025-05-03 15:48:27.002 UTC [2049] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:48:27.002 UTC [2049] DETAIL:  parameters: $1 = '-35'
2025-05-03 15:48:27.189 UTC [2049] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:48:27.189 UTC [2049] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:48:27.192 UTC [2049] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:48:27.196 UTC [2049] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:48:27.196 UTC [2049] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:48:27.201 UTC [2049] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:48:27.201 UTC [2051] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:48:27.202 UTC [2050] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:48:27.202 UTC [2050] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:48:27.204 UTC [2052] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:48:42.111 UTC [2062] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:48:42.111 UTC [2062] DETAIL:  parameters: $1 = '2025-05-03', $2 = '20:21', $3 = 'Cash In', $4 = '120', $5 = 'KR L CA N R.', $6 = '700794', $7 = '10', $8 = 'CUANA'
2025-05-03 15:48:42.113 UTC [2062] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:48:42.113 UTC [2062] DETAIL:  parameters: $1 = '-120'
2025-05-03 15:48:42.360 UTC [2062] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:48:42.360 UTC [2062] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:48:42.362 UTC [2062] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:48:42.364 UTC [2062] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:48:42.366 UTC [2062] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:48:42.366 UTC [2062] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:48:42.371 UTC [2063] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:48:42.371 UTC [2063] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:48:42.371 UTC [2062] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:48:42.379 UTC [2064] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:49:10.751 UTC [2090] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:49:10.751 UTC [2090] DETAIL:  parameters: $1 = '2025-05-03', $2 = '21:30', $3 = 'Cash In', $4 = '980', $5 = 'ENRICO D.', $6 = '34545', $7 = '20', $8 = 'SENT'
2025-05-03 15:49:10.757 UTC [2090] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:49:10.757 UTC [2090] DETAIL:  parameters: $1 = '-980'
2025-05-03 15:49:11.011 UTC [2090] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:49:11.011 UTC [2090] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:49:11.014 UTC [2090] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:49:11.015 UTC [2090] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:49:11.018 UTC [2090] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:49:11.018 UTC [2090] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:49:11.021 UTC [2090] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:49:11.024 UTC [2092] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:49:11.025 UTC [2091] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:49:11.025 UTC [2091] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:49:23.952 UTC [2101] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:49:23.952 UTC [2101] DETAIL:  parameters: $1 = '2025-05-03', $2 = '22:13', $3 = 'Cash In', $4 = '50', $5 = 'CARISSE V.', $6 = '35098', $7 = '5', $8 = 'SENT'
2025-05-03 15:49:23.954 UTC [2101] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:49:23.954 UTC [2101] DETAIL:  parameters: $1 = '-50'
2025-05-03 15:49:24.299 UTC [2101] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:49:24.301 UTC [2101] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:49:24.301 UTC [2101] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:49:24.313 UTC [2101] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:49:24.320 UTC [2102] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:49:24.321 UTC [2104] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:49:24.321 UTC [2104] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:49:24.321 UTC [2103] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:49:24.321 UTC [2103] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:49:24.328 UTC [2103] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:49:29.233 UTC [28] LOG:  checkpoint starting: time
2025-05-03 15:49:29.678 UTC [28] LOG:  checkpoint complete: wrote 5 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.423 s, sync=0.005 s, total=0.447 s; sync files=5, longest=0.004 s, average=0.001 s; distance=8 kB, estimate=8 kB; lsn=0/19BE8F8, redo lsn=0/19BE8C0
2025-05-03 15:49:47.099 UTC [2129] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:49:47.099 UTC [2129] DETAIL:  parameters: $1 = '2025-05-03', $2 = '13:35', $3 = 'Cash Out', $4 = '110', $5 = 'CARISSE V.', $6 = 'A5471', $7 = '10', $8 = 'MAYA - CLAIMED'
2025-05-03 15:49:47.101 UTC [2129] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:49:47.101 UTC [2129] DETAIL:  parameters: $1 = '110'
2025-05-03 15:49:47.387 UTC [2129] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:49:47.387 UTC [2129] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:49:47.392 UTC [2129] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:49:47.396 UTC [2129] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:49:47.403 UTC [2130] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:49:47.403 UTC [2133] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:49:47.404 UTC [2131] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:49:47.404 UTC [2131] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:49:47.407 UTC [2132] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:49:47.407 UTC [2132] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:50:07.469 UTC [2150] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:50:07.469 UTC [2150] DETAIL:  parameters: $1 = '2025-05-03', $2 = '14:31', $3 = 'Cash Out', $4 = '250', $5 = 'AIRA MARIE', $6 = '672B1', $7 = '10', $8 = 'MAYA - CLAIMED'
2025-05-03 15:50:07.472 UTC [2150] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:50:07.472 UTC [2150] DETAIL:  parameters: $1 = '250'
2025-05-03 15:50:07.759 UTC [2150] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:50:07.759 UTC [2150] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:50:07.761 UTC [2150] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:50:07.763 UTC [2150] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:50:07.765 UTC [2150] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:50:07.770 UTC [2153] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:50:07.770 UTC [2151] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:50:07.770 UTC [2151] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:50:07.770 UTC [2152] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:50:07.770 UTC [2152] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:50:26.005 UTC [2170] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:50:26.005 UTC [2170] DETAIL:  parameters: $1 = '2025-05-03', $2 = '20:03', $3 = 'Cash In', $4 = '200', $5 = '09937991781', $6 = '1CB1F', $7 = '10', $8 = 'MAYA - SENT'
2025-05-03 15:50:26.008 UTC [2170] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:50:26.008 UTC [2170] DETAIL:  parameters: $1 = '-200'
2025-05-03 15:50:26.295 UTC [2170] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:50:26.295 UTC [2170] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:50:26.297 UTC [2170] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:50:26.299 UTC [2170] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:50:26.303 UTC [2170] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:50:26.303 UTC [2170] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:50:26.305 UTC [2170] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:50:26.307 UTC [2171] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:50:26.307 UTC [2171] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:50:26.309 UTC [2172] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:50:57.206 UTC [2198] LOG:  execute <unnamed>: INSERT INTO Transactions (date, time, type, amount, name, ref, fee, remarks, created_at, updated_at)
	       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	       RETURNING id
2025-05-03 15:50:57.206 UTC [2198] DETAIL:  parameters: $1 = '2025-05-03', $2 = '22:20', $3 = 'Cash Out', $4 = '190', $5 = 'MA A CR A P.', $6 = 'C4951', $7 = '10', $8 = 'MAYA - CLAIMED'
2025-05-03 15:50:57.208 UTC [2198] LOG:  execute <unnamed>: UPDATE CurrentBalance SET balance = balance + $1 WHERE id = 1
2025-05-03 15:50:57.208 UTC [2198] DETAIL:  parameters: $1 = '190'
2025-05-03 15:50:57.527 UTC [2198] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:50:57.527 UTC [2198] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:50:57.530 UTC [2198] LOG:  statement: SELECT balance FROM CurrentBalance WHERE id = 1
2025-05-03 15:50:57.533 UTC [2198] LOG:  statement: 
	      SELECT type, COUNT(*) as count
	      FROM Transactions
	      GROUP BY type
	    
2025-05-03 15:50:57.537 UTC [2198] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:50:57.540 UTC [2199] LOG:  execute <unnamed>: 
	      SELECT date, SUM(CAST(amount AS DECIMAL)) as total_amount
	      FROM Transactions
	      WHERE date >= $1
	      GROUP BY date
	      ORDER BY date ASC
	    
2025-05-03 15:50:57.540 UTC [2199] DETAIL:  parameters: $1 = '2025-04-27'
2025-05-03 15:50:57.540 UTC [2201] LOG:  statement: 
	      SELECT COUNT(DISTINCT name) AS total_users
	      FROM Transactions
	    
2025-05-03 15:50:57.540 UTC [2200] LOG:  execute <unnamed>: 
	      SELECT 
	        name,
	        SUM(CASE WHEN type = 'Cash In' THEN 1 ELSE 0 END) AS cash_in_count,
	        SUM(CASE WHEN type = 'Cash Out' THEN 1 ELSE 0 END) AS cash_out_count,
	        SUM(CASE WHEN type = 'Load' THEN 1 ELSE 0 END) AS load_count,
	        MAX(date) AS last_transaction
	      FROM Transactions
	    
	      GROUP BY name
	      ORDER BY name ASC
	      LIMIT $1 OFFSET $2
	    
2025-05-03 15:50:57.540 UTC [2200] DETAIL:  parameters: $1 = '10', $2 = '0'
2025-05-03 15:51:55.056 UTC [2203] LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
2025-05-03 15:51:55.057 UTC [2203] LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()
2025-05-03 15:51:55.058 UTC [2203] LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
2025-05-03 15:51:55.058 UTC [2203] LOG:  statement: SET DATESTYLE = ISO
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SET INTERVALSTYLE = POSTGRES
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SET extra_float_digits TO 3
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SET synchronize_seqscans TO off
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SET statement_timeout = 0
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SET lock_timeout = 0
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SET idle_in_transaction_session_timeout = 0
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SET row_security = off
2025-05-03 15:51:55.059 UTC [2203] LOG:  statement: SELECT set_config(name, 'view, foreign-table', false) FROM pg_settings WHERE name = 'restrict_nonsystem_relation_kind'
2025-05-03 15:51:55.065 UTC [2203] LOG:  statement: BEGIN
2025-05-03 15:51:55.065 UTC [2203] LOG:  statement: SET TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ ONLY
2025-05-03 15:51:55.066 UTC [2203] LOG:  statement: SELECT oid, rolname FROM pg_catalog.pg_roles ORDER BY 1
2025-05-03 15:51:55.068 UTC [2203] LOG:  statement: SELECT x.tableoid, x.oid, x.extname, n.nspname, x.extrelocatable, x.extversion, x.extconfig, x.extcondition FROM pg_extension x JOIN pg_namespace n ON n.oid = x.extnamespace
2025-05-03 15:51:55.071 UTC [2203] LOG:  statement: SELECT classid, objid, refobjid FROM pg_depend WHERE refclassid = 'pg_extension'::regclass AND deptype = 'e' ORDER BY 3
2025-05-03 15:51:55.074 UTC [2203] LOG:  statement: SELECT n.tableoid, n.oid, n.nspname, n.nspowner, n.nspacl, acldefault('n', n.nspowner) AS acldefault FROM pg_namespace n
2025-05-03 15:51:55.075 UTC [2203] LOG:  statement: SELECT c.tableoid, c.oid, c.relname, c.relnamespace, c.relkind, c.reltype, c.relowner, c.relchecks, c.relhasindex, c.relhasrules, c.relpages, c.relhastriggers, c.relpersistence, c.reloftype, c.relacl, acldefault(CASE WHEN c.relkind = 'S' THEN 's'::"char" ELSE 'r'::"char" END, c.relowner) AS acldefault, CASE WHEN c.relkind = 'f' THEN (SELECT ftserver FROM pg_catalog.pg_foreign_table WHERE ftrelid = c.oid) ELSE 0 END AS foreignserver, c.relfrozenxid, tc.relfrozenxid AS tfrozenxid, tc.oid AS toid, tc.relpages AS toastpages, tc.reloptions AS toast_reloptions, d.refobjid AS owning_tab, d.refobjsubid AS owning_col, tsp.spcname AS reltablespace, false AS relhasoids, c.relispopulated, c.relreplident, c.relrowsecurity, c.relforcerowsecurity, c.relminmxid, tc.relminmxid AS tminmxid, array_remove(array_remove(c.reloptions,'check_option=local'),'check_option=cascaded') AS reloptions, CASE WHEN 'check_option=local' = ANY (c.reloptions) THEN 'LOCAL'::text WHEN 'check_option=cascaded' = ANY (c.reloptions) THEN 'CASCADED'::text ELSE NULL END AS checkoption, am.amname, (d.deptype = 'i') IS TRUE AS is_identity_sequence, c.relispartition AS ispartition 
	FROM pg_class c
	LEFT JOIN pg_depend d ON (c.relkind = 'S' AND d.classid = 'pg_class'::regclass AND d.objid = c.oid AND d.objsubid = 0 AND d.refclassid = 'pg_class'::regclass AND d.deptype IN ('a', 'i'))
	LEFT JOIN pg_tablespace tsp ON (tsp.oid = c.reltablespace)
	LEFT JOIN pg_am am ON (c.relam = am.oid)
	LEFT JOIN pg_class tc ON (c.reltoastrelid = tc.oid AND tc.relkind = 't' AND c.relkind <> 'p')
	WHERE c.relkind IN ('r', 'S', 'v', 'c', 'm', 'f', 'p')
	ORDER BY c.oid
2025-05-03 15:51:55.088 UTC [2203] LOG:  statement: LOCK TABLE public.transactions, public.currentbalance IN ACCESS SHARE MODE
2025-05-03 15:51:55.088 UTC [2203] LOG:  statement: SELECT p.tableoid, p.oid, p.proname, p.prolang, p.pronargs, p.proargtypes, p.prorettype, p.proacl, acldefault('f', p.proowner) AS acldefault, p.pronamespace, p.proowner FROM pg_proc p LEFT JOIN pg_init_privs pip ON (p.oid = pip.objoid AND pip.classoid = 'pg_proc'::regclass AND pip.objsubid = 0) WHERE p.prokind <> 'a'
	  AND NOT EXISTS (SELECT 1 FROM pg_depend WHERE classid = 'pg_proc'::regclass AND objid = p.oid AND deptype = 'i')
	  AND (
	  pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog')
	  OR EXISTS (SELECT 1 FROM pg_cast
	  WHERE pg_cast.oid > 16383 
	  AND p.oid = pg_cast.castfunc)
	  OR EXISTS (SELECT 1 FROM pg_transform
	  WHERE pg_transform.oid > 16383 AND 
	  (p.oid = pg_transform.trffromsql
	  OR p.oid = pg_transform.trftosql))
	  OR p.proacl IS DISTINCT FROM pip.initprivs)
2025-05-03 15:51:55.103 UTC [2203] LOG:  statement: SELECT tableoid, oid, typname, typnamespace, typacl, acldefault('T', typowner) AS acldefault, typowner, typelem, typrelid, CASE WHEN typrelid = 0 THEN ' '::"char" ELSE (SELECT relkind FROM pg_class WHERE oid = typrelid) END AS typrelkind, typtype, typisdefined, typname[0] = '_' AND typelem != 0 AND (SELECT typarray FROM pg_type te WHERE oid = pg_type.typelem) = oid AS isarray FROM pg_type
2025-05-03 15:51:55.107 UTC [2203] LOG:  statement: SELECT tableoid, oid, lanname, lanpltrusted, lanplcallfoid, laninline, lanvalidator, lanacl, acldefault('l', lanowner) AS acldefault, lanowner FROM pg_language WHERE lanispl ORDER BY oid
2025-05-03 15:51:55.108 UTC [2203] LOG:  statement: SELECT p.tableoid, p.oid, p.proname AS aggname, p.pronamespace AS aggnamespace, p.pronargs, p.proargtypes, p.proowner, p.proacl AS aggacl, acldefault('f', p.proowner) AS acldefault FROM pg_proc p LEFT JOIN pg_init_privs pip ON (p.oid = pip.objoid AND pip.classoid = 'pg_proc'::regclass AND pip.objsubid = 0) WHERE p.prokind = 'a' AND (p.pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog') OR p.proacl IS DISTINCT FROM pip.initprivs)
2025-05-03 15:51:55.109 UTC [2203] LOG:  statement: SELECT tableoid, oid, oprname, oprnamespace, oprowner, oprkind, oprcode::oid AS oprcode FROM pg_operator
2025-05-03 15:51:55.110 UTC [2203] LOG:  statement: SELECT tableoid, oid, amname, amtype, amhandler::pg_catalog.regproc AS amhandler FROM pg_am
2025-05-03 15:51:55.111 UTC [2203] LOG:  statement: SELECT tableoid, oid, opcname, opcnamespace, opcowner FROM pg_opclass
2025-05-03 15:51:55.112 UTC [2203] LOG:  statement: SELECT tableoid, oid, opfname, opfnamespace, opfowner FROM pg_opfamily
2025-05-03 15:51:55.114 UTC [2203] LOG:  statement: SELECT tableoid, oid, prsname, prsnamespace, prsstart::oid, prstoken::oid, prsend::oid, prsheadline::oid, prslextype::oid FROM pg_ts_parser
2025-05-03 15:51:55.115 UTC [2203] LOG:  statement: SELECT tableoid, oid, tmplname, tmplnamespace, tmplinit::oid, tmpllexize::oid FROM pg_ts_template
2025-05-03 15:51:55.116 UTC [2203] LOG:  statement: SELECT tableoid, oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption FROM pg_ts_dict
2025-05-03 15:51:55.118 UTC [2203] LOG:  statement: SELECT tableoid, oid, cfgname, cfgnamespace, cfgowner, cfgparser FROM pg_ts_config
2025-05-03 15:51:55.119 UTC [2203] LOG:  statement: SELECT tableoid, oid, fdwname, fdwowner, fdwhandler::pg_catalog.regproc, fdwvalidator::pg_catalog.regproc, fdwacl, acldefault('F', fdwowner) AS acldefault, array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(fdwoptions) ORDER BY option_name), E',
	    ') AS fdwoptions FROM pg_foreign_data_wrapper
2025-05-03 15:51:55.121 UTC [2203] LOG:  statement: SELECT tableoid, oid, srvname, srvowner, srvfdw, srvtype, srvversion, srvacl, acldefault('S', srvowner) AS acldefault, array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(srvoptions) ORDER BY option_name), E',
	    ') AS srvoptions FROM pg_foreign_server
2025-05-03 15:51:55.122 UTC [2203] LOG:  statement: SELECT oid, tableoid, defaclrole, defaclnamespace, defaclobjtype, defaclacl, CASE WHEN defaclnamespace = 0 THEN acldefault(CASE WHEN defaclobjtype = 'S' THEN 's'::"char" ELSE defaclobjtype END, defaclrole) ELSE '{}' END AS acldefault FROM pg_default_acl
2025-05-03 15:51:55.123 UTC [2203] LOG:  statement: SELECT tableoid, oid, collname, collnamespace, collowner FROM pg_collation
2025-05-03 15:51:55.125 UTC [2203] LOG:  statement: SELECT tableoid, oid, conname, connamespace, conowner FROM pg_conversion
2025-05-03 15:51:55.127 UTC [2203] LOG:  statement: SELECT tableoid, oid, castsource, casttarget, castfunc, castcontext, castmethod FROM pg_cast c WHERE NOT EXISTS ( SELECT 1 FROM pg_range r WHERE c.castsource = r.rngtypid AND c.casttarget = r.rngmultitypid ) ORDER BY 3,4
2025-05-03 15:51:55.128 UTC [2203] LOG:  statement: SELECT tableoid, oid, trftype, trflang, trffromsql::oid, trftosql::oid FROM pg_transform ORDER BY 3,4
2025-05-03 15:51:55.129 UTC [2203] LOG:  statement: SELECT inhrelid, inhparent FROM pg_inherits
2025-05-03 15:51:55.129 UTC [2203] LOG:  statement: SELECT e.tableoid, e.oid, evtname, evtenabled, evtevent, evtowner, array_to_string(array(select quote_literal(x)  from unnest(evttags) as t(x)), ', ') as evttags, e.evtfoid::regproc as evtfname FROM pg_event_trigger e ORDER BY e.oid
2025-05-03 15:51:55.130 UTC [2203] LOG:  statement: SELECT conrelid, confrelid FROM pg_constraint JOIN pg_depend ON (objid = confrelid) WHERE contype = 'f' AND refclassid = 'pg_extension'::regclass AND classid = 'pg_class'::regclass;
2025-05-03 15:51:55.134 UTC [2203] LOG:  statement: SELECT
	a.attrelid,
	a.attnum,
	a.attname,
	a.attstattarget,
	a.attstorage,
	t.typstorage,
	a.attnotnull,
	a.atthasdef,
	a.attisdropped,
	a.attlen,
	a.attalign,
	a.attislocal,
	pg_catalog.format_type(t.oid, a.atttypmod) AS atttypname,
	array_to_string(a.attoptions, ', ') AS attoptions,
	CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation,
	pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
	    ') AS attfdwoptions,
	a.attcompression AS attcompression,
	a.attidentity,
	CASE WHEN a.atthasmissing AND NOT a.attisdropped THEN a.attmissingval ELSE null END AS attmissingval,
	a.attgenerated
	FROM unnest('{16394,16405}'::pg_catalog.oid[]) AS src(tbloid)
	JOIN pg_catalog.pg_attribute a ON (src.tbloid = a.attrelid) LEFT JOIN pg_catalog.pg_type t ON (a.atttypid = t.oid)
	WHERE a.attnum > 0::pg_catalog.int2
	ORDER BY a.attrelid, a.attnum
2025-05-03 15:51:55.135 UTC [2203] LOG:  statement: SELECT a.tableoid, a.oid, adrelid, adnum, pg_catalog.pg_get_expr(adbin, adrelid) AS adsrc
	FROM unnest('{16394,16405}'::pg_catalog.oid[]) AS src(tbloid)
	JOIN pg_catalog.pg_attrdef a ON (src.tbloid = a.adrelid)
	ORDER BY a.adrelid, a.adnum
2025-05-03 15:51:55.137 UTC [2203] LOG:  statement: SELECT partrelid FROM pg_partitioned_table WHERE
	(SELECT c.oid FROM pg_opclass c JOIN pg_am a ON c.opcmethod = a.oid
	WHERE opcname = 'enum_ops' AND opcnamespace = 'pg_catalog'::regnamespace AND amname = 'hash') = ANY(partclass)
2025-05-03 15:51:55.137 UTC [2203] LOG:  statement: SELECT t.tableoid, t.oid, i.indrelid, t.relname AS indexname, pg_catalog.pg_get_indexdef(i.indexrelid) AS indexdef, i.indkey, i.indisclustered, c.contype, c.conname, c.condeferrable, c.condeferred, c.tableoid AS contableoid, c.oid AS conoid, pg_catalog.pg_get_constraintdef(c.oid, false) AS condef, (SELECT spcname FROM pg_catalog.pg_tablespace s WHERE s.oid = t.reltablespace) AS tablespace, t.reloptions AS indreloptions, i.indisreplident, inh.inhparent AS parentidx, i.indnkeyatts AS indnkeyatts, i.indnatts AS indnatts, (SELECT pg_catalog.array_agg(attnum ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatcols, (SELECT pg_catalog.array_agg(attstattarget ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatvals, i.indnullsnotdistinct FROM unnest('{16394,16405}'::pg_catalog.oid[]) AS src(tbloid)
	JOIN pg_catalog.pg_index i ON (src.tbloid = i.indrelid) JOIN pg_catalog.pg_class t ON (t.oid = i.indexrelid) JOIN pg_catalog.pg_class t2 ON (t2.oid = i.indrelid) LEFT JOIN pg_catalog.pg_constraint c ON (i.indrelid = c.conrelid AND i.indexrelid = c.conindid AND c.contype IN ('p','u','x')) LEFT JOIN pg_catalog.pg_inherits inh ON (inh.inhrelid = indexrelid) WHERE (i.indisvalid OR t2.relkind = 'p') AND i.indisready ORDER BY i.indrelid, indexname
2025-05-03 15:51:55.141 UTC [2203] LOG:  statement: SELECT tableoid, oid, stxname, stxnamespace, stxowner, stxrelid, stxstattarget FROM pg_catalog.pg_statistic_ext
2025-05-03 15:51:55.141 UTC [2203] LOG:  statement: SELECT c.tableoid, c.oid, conrelid, conname, confrelid, conindid, pg_catalog.pg_get_constraintdef(c.oid) AS condef
	FROM unnest('{}'::pg_catalog.oid[]) AS src(tbloid)
	JOIN pg_catalog.pg_constraint c ON (src.tbloid = c.conrelid)
	WHERE contype = 'f' AND conparentid = 0 ORDER BY conrelid, conname
2025-05-03 15:51:55.142 UTC [2203] LOG:  statement: SELECT t.tgrelid, t.tgname, t.tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(t.oid, false) AS tgdef, t.tgenabled, t.tableoid, t.oid, t.tgparentid <> 0 AS tgispartition
	FROM unnest('{}'::pg_catalog.oid[]) AS src(tbloid)
	JOIN pg_catalog.pg_trigger t ON (src.tbloid = t.tgrelid) LEFT JOIN pg_catalog.pg_trigger u ON (u.oid = t.tgparentid) WHERE ((NOT t.tgisinternal AND t.tgparentid = 0) OR t.tgenabled != u.tgenabled) ORDER BY t.tgrelid, t.tgname
2025-05-03 15:51:55.143 UTC [2203] LOG:  statement: SELECT tableoid, oid, rulename, ev_class AS ruletable, ev_type, is_instead, ev_enabled FROM pg_rewrite ORDER BY oid
2025-05-03 15:51:55.145 UTC [2203] LOG:  statement: SELECT pol.oid, pol.tableoid, pol.polrelid, pol.polname, pol.polcmd, pol.polpermissive, CASE WHEN pol.polroles = '{0}' THEN NULL ELSE    pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(rolname) from pg_catalog.pg_roles WHERE oid = ANY(pol.polroles)), ', ') END AS polroles, pg_catalog.pg_get_expr(pol.polqual, pol.polrelid) AS polqual, pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid) AS polwithcheck FROM unnest('{16394,16405}'::pg_catalog.oid[]) AS src(tbloid)
	JOIN pg_catalog.pg_policy pol ON (src.tbloid = pol.polrelid)
2025-05-03 15:51:55.146 UTC [2203] LOG:  statement: SELECT p.tableoid, p.oid, p.pubname, p.pubowner, p.puballtables, p.pubinsert, p.pubupdate, p.pubdelete, p.pubtruncate, p.pubviaroot FROM pg_publication p
2025-05-03 15:51:55.146 UTC [2203] LOG:  statement: SELECT tableoid, oid, prpubid, prrelid, pg_catalog.pg_get_expr(prqual, prrelid) AS prrelqual, (CASE
	  WHEN pr.prattrs IS NOT NULL THEN
	    (SELECT array_agg(attname)
	       FROM
	         pg_catalog.generate_series(0, pg_catalog.array_upper(pr.prattrs::pg_catalog.int2[], 1)) s,
	         pg_catalog.pg_attribute
	      WHERE attrelid = pr.prrelid AND attnum = prattrs[s])
	  ELSE NULL END) prattrs FROM pg_catalog.pg_publication_rel pr
2025-05-03 15:51:55.147 UTC [2203] LOG:  statement: SELECT tableoid, oid, pnpubid, pnnspid FROM pg_catalog.pg_publication_namespace
2025-05-03 15:51:55.148 UTC [2203] LOG:  statement: SELECT s.tableoid, s.oid, s.subname,
	 s.subowner,
	 s.subconninfo, s.subslotname, s.subsynccommit,
	 s.subpublications,
	 s.subbinary,
	 s.substream,
	 s.subtwophasestate,
	 s.subdisableonerr,
	 s.subpasswordrequired,
	 s.subrunasowner,
	 s.suborigin
	FROM pg_subscription s
	WHERE s.subdbid = (SELECT oid FROM pg_database
	                   WHERE datname = current_database())
2025-05-03 15:51:55.148 UTC [2203] LOG:  statement: WITH RECURSIVE w AS ( SELECT d1.objid, d2.refobjid, c2.relkind AS refrelkind FROM pg_depend d1 JOIN pg_class c1 ON c1.oid = d1.objid AND c1.relkind = 'm' JOIN pg_rewrite r1 ON r1.ev_class = d1.objid JOIN pg_depend d2 ON d2.classid = 'pg_rewrite'::regclass AND d2.objid = r1.oid AND d2.refobjid <> d1.objid JOIN pg_class c2 ON c2.oid = d2.refobjid AND c2.relkind IN ('m','v') WHERE d1.classid = 'pg_class'::regclass UNION SELECT w.objid, d3.refobjid, c3.relkind FROM w JOIN pg_rewrite r3 ON r3.ev_class = w.refobjid JOIN pg_depend d3 ON d3.classid = 'pg_rewrite'::regclass AND d3.objid = r3.oid AND d3.refobjid <> w.refobjid JOIN pg_class c3 ON c3.oid = d3.refobjid AND c3.relkind IN ('m','v') ) SELECT 'pg_class'::regclass::oid AS classid, objid, refobjid FROM w WHERE refrelkind = 'm'
2025-05-03 15:51:55.150 UTC [2203] LOG:  statement: SELECT oid, lomowner, lomacl, acldefault('L', lomowner) AS acldefault FROM pg_largeobject_metadata
2025-05-03 15:51:55.150 UTC [2203] LOG:  statement: SELECT classid, objid, refclassid, refobjid, deptype FROM pg_depend WHERE deptype != 'p' AND deptype != 'e'
	UNION ALL
	SELECT 'pg_opfamily'::regclass AS classid, amopfamily AS objid, refclassid, refobjid, deptype FROM pg_depend d, pg_amop o WHERE deptype NOT IN ('p', 'e', 'i') AND classid = 'pg_amop'::regclass AND objid = o.oid AND NOT (refclassid = 'pg_opfamily'::regclass AND amopfamily = refobjid)
	UNION ALL
	SELECT 'pg_opfamily'::regclass AS classid, amprocfamily AS objid, refclassid, refobjid, deptype FROM pg_depend d, pg_amproc p WHERE deptype NOT IN ('p', 'e', 'i') AND classid = 'pg_amproc'::regclass AND objid = p.oid AND NOT (refclassid = 'pg_opfamily'::regclass AND amprocfamily = refobjid)
	ORDER BY 1,2
2025-05-03 15:51:55.155 UTC [2203] LOG:  statement: SELECT DISTINCT attrelid FROM pg_attribute WHERE attacl IS NOT NULL
2025-05-03 15:51:55.161 UTC [2203] LOG:  statement: SELECT objoid, classoid, objsubid, privtype, initprivs FROM pg_init_privs
2025-05-03 15:51:55.161 UTC [2203] LOG:  statement: SELECT description, classoid, objoid, objsubid FROM pg_catalog.pg_description ORDER BY classoid, objoid, objsubid
2025-05-03 15:51:55.173 UTC [2203] LOG:  statement: SELECT label, provider, classoid, objoid, objsubid FROM pg_catalog.pg_seclabel ORDER BY classoid, objoid, objsubid
2025-05-03 15:51:55.175 UTC [2203] LOG:  statement: SELECT pg_catalog.current_schemas(false)
2025-05-03 15:51:55.175 UTC [2203] LOG:  statement: PREPARE dumpEnumType(pg_catalog.oid) AS
	SELECT oid, enumlabel FROM pg_catalog.pg_enum WHERE enumtypid = $1 ORDER BY enumsortorder
2025-05-03 15:51:55.176 UTC [2203] LOG:  statement: EXECUTE dumpEnumType('16386')
2025-05-03 15:51:55.176 UTC [2203] DETAIL:  prepare: PREPARE dumpEnumType(pg_catalog.oid) AS
	SELECT oid, enumlabel FROM pg_catalog.pg_enum WHERE enumtypid = $1 ORDER BY enumsortorder
2025-05-03 15:51:55.177 UTC [2203] LOG:  statement: PREPARE getColumnACLs(pg_catalog.oid) AS
	SELECT at.attname, at.attacl, '{}' AS acldefault, pip.privtype, pip.initprivs FROM pg_catalog.pg_attribute at LEFT JOIN pg_catalog.pg_init_privs pip ON (at.attrelid = pip.objoid AND pip.classoid = 'pg_catalog.pg_class'::pg_catalog.regclass AND at.attnum = pip.objsubid) WHERE at.attrelid = $1 AND NOT at.attisdropped AND (at.attacl IS NOT NULL OR pip.initprivs IS NOT NULL) ORDER BY at.attnum
2025-05-03 15:51:55.177 UTC [2203] LOG:  statement: EXECUTE getColumnACLs('6100')
2025-05-03 15:51:55.177 UTC [2203] DETAIL:  prepare: PREPARE getColumnACLs(pg_catalog.oid) AS
	SELECT at.attname, at.attacl, '{}' AS acldefault, pip.privtype, pip.initprivs FROM pg_catalog.pg_attribute at LEFT JOIN pg_catalog.pg_init_privs pip ON (at.attrelid = pip.objoid AND pip.classoid = 'pg_catalog.pg_class'::pg_catalog.regclass AND at.attnum = pip.objsubid) WHERE at.attrelid = $1 AND NOT at.attisdropped AND (at.attacl IS NOT NULL OR pip.initprivs IS NOT NULL) ORDER BY at.attnum
2025-05-03 15:51:55.177 UTC [2203] LOG:  statement: SELECT format_type(seqtypid, NULL), seqstart, seqincrement, seqmax, seqmin, seqcache, seqcycle FROM pg_catalog.pg_sequence WHERE seqrelid = '16404'::oid
2025-05-03 15:51:55.177 UTC [2203] LOG:  statement: SELECT format_type(seqtypid, NULL), seqstart, seqincrement, seqmax, seqmin, seqcache, seqcycle FROM pg_catalog.pg_sequence WHERE seqrelid = '16393'::oid
2025-05-03 15:51:55.178 UTC [2203] LOG:  statement: SELECT last_value, is_called FROM public.currentbalance_id_seq
2025-05-03 15:51:55.178 UTC [2203] LOG:  statement: SELECT last_value, is_called FROM public.transactions_id_seq
2025-05-03 15:51:55.178 UTC [2203] LOG:  statement: COPY public.currentbalance (id, balance) TO stdout;
2025-05-03 15:51:55.179 UTC [2203] LOG:  statement: COPY public.transactions (id, date, "time", type, amount, name, ref, fee, remarks, created_at, updated_at) TO stdout;
2025-05-03 15:51:18.335 UTC [2221] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id DESC
2025-05-03 15:51:18.335 UTC [2221] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:51:18.342 UTC [2221] LOG:  statement: SELECT * FROM Transactions ORDER BY id DESC LIMIT 1
2025-05-03 15:51:20.570 UTC [2221] LOG:  execute <unnamed>: SELECT * FROM Transactions WHERE date = $1 ORDER BY id ASC
2025-05-03 15:51:20.570 UTC [2221] DETAIL:  parameters: $1 = '2025-05-03'
2025-05-03 15:52:16.399 UTC [1] LOG:  received fast shutdown request
2025-05-03 15:52:16.404 UTC [1] LOG:  aborting any active transactions
2025-05-03 15:52:16.411 UTC [1] LOG:  background worker "logical replication launcher" (PID 33) exited with exit code 1
2025-05-03 15:52:16.423 UTC [34] FATAL:  terminating connection due to administrator command
2025-05-03 15:52:16.430 UTC [28] LOG:  shutting down
2025-05-03 15:52:16.433 UTC [28] LOG:  checkpoint starting: shutdown immediate
2025-05-03 15:52:16.453 UTC [28] LOG:  checkpoint complete: wrote 9 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.003 s, sync=0.005 s, total=0.023 s; sync files=8, longest=0.003 s, average=0.001 s; distance=8 kB, estimate=8 kB; lsn=0/19C0C40, redo lsn=0/19C0C40
2025-05-03 15:52:16.462 UTC [1] LOG:  database system is shut down
